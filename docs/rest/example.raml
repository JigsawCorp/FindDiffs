#%RAML 1.0
title: Ed Scan
baseUri: http://0.0.0.0:8001/
version: 1
securitySchemes: 
  token:
    description: Generated string used to identify each gun. Returns an error code 401 if the token is inexistant or invalid.
    type: Digest Authentication
    describedBy: 
      headers: 
        TOKEN:
          description: The token generated by the method /auth/login
          type: string
      queryParameters: 
        TOKEN:
          description: The token must be passed as a header or a post argument.
          type: string
      responses:
        401:
          description: The token is not valid.
          body:
            application/json:
              example: |
                {
                  "DetailedInformation": "Please use a valid token.",
                  "Reason": "The token is not valid"
                }
                
/auth:
  description: All the requests associated with client authentification
  /getTokenFromQR:
    post:
      description: Returns an authorisation code for the specific gun. It allows it to get a specific token assign to it.
      body:
        application/json:
          example: |
            {
              "code":"2565656656",
              "androidName":"Android name of the device including it's version",
              "androidGUID":"GUID of the device"
            }
      responses:
        200:
          description: "The authentification is correct. The api returns a valid token that must be used with all the requests"
          body:
            application/json:
              example: |
                {
                  "status":true,
                  "token": "b3b065a6cefc0843429d8e3c5d21320a29bbfbffbf80a6c57e415b4cea896fc5"
                }
        401:
          description: "The authentification failed."
          body:
            application/json:
              example: |
                {
                  "DetailedInformation":"The authentification failed",
                  "Reason":"The code parameter is not valid"
                }
        400:
          description: "Some parameters are missing"
          body:
            application/json:
              example: |
                {
                  "DetailedInformation":"The authentification failed",
                  "Reason":"Some parameters are missing"
                }
  /connect:
    get:
      description: Test if the token is still valid
      securedBy: token
      responses:
        200:
          description: "The token is valid"
          body:
            application/json:
              example: |
                {
                  "status":true
                }
/product:
  description: All requests associated with products
  get:
    description: Returns all product from Acomba X.
    securedBy: token
    responses: 
      200:
        description: "All the products in json array"
        body:
          application/json:
            example:  |
              [
                {
                  "CategoryId":"1fa48da43abf4232bdb4d40e79f09f30",
                  "CategoryNumber":"Nom de la catégorie",
                  "CategoryName0":"Nom français de la catégorie",
                  "CategoryName1":"Nom anglais de la catégorie",
                  "Description0":"Description du produit français",
                  "Description1":"Description du produit anglais",
                  "Location": "Emplacement du produit dans l'inventaire",
                  "Number" : "Numéro identification du produit",
                  "Id":"b40f3c222d584b5d81b95813deb564a3",
                  "Cup":"151515312",
                  "Quantity":0,
                  "Unit":"L"
                }
              ]
  /category/:
    get:
      description: "Returns all the product categories"
      securedBy: token
      responses:
        200:
          body:
            application/json:
              example:  |
                [
                  {
                    "Id":"b40f3c222d584b5d81b95813deb564a3",
                    "Number":"Number of the category",
                    "Description0": "Description of the category in french",
                    "Description1": "Description of the category in english"
                  }
                ]
  /cup/{cup}:
    get:
      description: Return the selected product from Acomba X.
      securedBy: token
      responses: 
        200:
          description: "The product in json object"
          body:
            application/json:
              example:  |
                {
                  "CategoryId":"1fa48da43abf4232bdb4d40e79f09f30",
                  "CategoryNumber":"Nom de la catégorie",
                  "CategoryName0":"Nom français de la catégorie",
                  "CategoryName1":"Nom anglais de la catégorie",
                  "Description0":"Description du produit français",
                  "Description1":"Description du produit anglais",
                  "Location": "Emplacement du produit dans l'inventaire",
                  "Number" : "Numéro identification du produit",
                  "Id":"b40f3c222d584b5d81b95813deb564a3",
                  "Cup":"151515312",
                  "Quantity":0,
                  "Unit":"L"
                }
  /{id}:
    get:
      description: Return the selected product from Acomba X.
      securedBy: token
      responses: 
        200:
          description: "The product in json object"
          body:
            application/json:
              example:  |
                {
                  "CategoryId":"1fa48da43abf4232bdb4d40e79f09f30",
                  "CategoryNumber":"Nom de la catégorie",
                  "CategoryName0":"Nom français de la catégorie",
                  "CategoryName1":"Nom anglais de la catégorie",
                  "Description0":"Description du produit français",
                  "Description1":"Description du produit anglais",
                  "Location": "Emplacement du produit dans l'inventaire",
                  "Number" : "Numéro identification du produit",
                  "Id":"b40f3c222d584b5d81b95813deb564a3",
                  "Cup":"151515312",
                  "Quantity":0,
                  "Unit":"L"
                }
    put:
      description: Edit a few product properties. The editables properties are listed in the examples. The fields are not obliged to be presents
      securedBy: token
      body:
        application/json:
          example:  |
            {
              "CategoryId":"1fa48da43abf4232bdb4d40e79f09f30",
              "Description0":"Description du produit en français",
              "Description1":"Description du produit en anglais",
              "Location":"Emplacement du prduit",
              "Cup":"151515115",
              "Quantity":0,
            }
      responses:
        200:
          description: "All the modifications where made successfully"
          body:
            application/json:
              example:  |
                {
                  "status":true
                }
        409:
          description: "There is a conflit with the modifications you have entered. Properties are the one included in the example of the get request"
          body:
            application/json:
              example:  |
                {
                  "conflict":{
                      "acomba":{
                        "property":"value"
                      },
                      "edscan":{
                        "property":"value"
                      }
                    }

                }
        400:
          description: "There is a problem with the request. Some parameters might be missing, or the selected properties cannot be edited"
          body:
            application/json:
              example:  |
                {
                  "DetailedInformation":"Parameters are missing or are not valid",
                  "Reason":"The parameter x is not valid."
                }
/customer:
  description: Every requests that takes care of the customer
  get:
    description: Returns all the customer
    securedBy: token
    responses: 
      200:
        description: "All the customer in json array"
        body:
          application/json:
            example:  |
              [
                {
                  "id": "3dc02bfb7473420e9d3727e4579d00e9",
                  "name": "Rolland Paquette Peintre Profe"
                },
                {
                  "id": "9e881f0c8874440784c12ecad82b3039",
                  "name": "Georgette Éthier Décoratrice"
                }
              ]
/reception:
  description: Requests associated with the reception of goods
  /supplier:
    get:
      description: Returns all the supplier from Acomba X.
      securedBy: token
      responses:
        200:
          description: "All the products in json array"
          body:
            application/json:
              properties:
                number: "Le numéro de téléphone au format que Acomba X retourne celui-ci"
              example:  |
                [
                  {
                    "Id":"b40f3c222d584b5d81b95813deb564a3",
                    "Number":"Numéro du fournisseur",
                    "Name":"Nom du fournisseur",
                    "Town": "Ville du fournisseur"
                    "Phones":[
                      {
                        "Type":"Le type de téléphone (maison bureau cell) etc..",
                        "Number":"18193392737 103"
                      }
                    ]
                  }
                ]
    /{id}:
      get:
        description: Returns a precise supplier
        securedBy: token
        responses:
          200:
            description: "A supplier in json object"
            body:
              application/json:
                properties:
                  number: "Le numéro de téléphone au format que Acomba X retourne celui-ci"
                example:  |
                  {
                    "Id":"b40f3c222d584b5d81b95813deb564a3",
                    "Number":"Numéro du fournisseur",
                    "Name":"Nom du fournisseur",
                    "Town": "Ville du fournisseur"
                    "Phones":[
                      {
                        "Type":"Le type de téléphone (maison bureau cell) etc..",
                        "Number":"18193392737 103"
                      }
                    ]
                  }
  /supplierOrder:
    /{id}:
      get:
        description: Returns all the orders of the selected supplier passed by the url
        securedBy: token
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    "Id":"b40f3c222d584b5d81b95813deb564a3"
                    "OrderDate":"1498682084",
                    "Number":"1"
                    "Description":"Description de l'achat"
                    "Products":[
                      {
                        "Id":"purchaseLineID",
                        "QtyReceived":0,
                        "QtyPurchased":10,
                        "Cup":"445454545",
                        "Description0":"Product description french",
                        "Description1":"Product description english",
                        "Number":"Product number"
                      }
                    ]
                  ]
          400:
            body:
              application/json:
                example: |
                  {
                    "DetailedInformation":"The supplier orders cannot be found",
                    "Reason":"Check the id, it's not valid"
                  }
  /order:
      put:
        description: Update the quantity of the received product
        securedBy: token
        body:
          application/json:
            properties:
              Id: Id of the purhcase line
              ReceivedQty: The quantity of the product that was received.
            example: |
              [
                {
                  "Id":"b40f3c222d584b5d81b95813deb564a3",
                  "ReceivedQty":10
                }
              ]
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "status":true
                  }
          400:
            body:
              application/json:
                example:  |
                  {
                    "DetailedInformation":"The product could not be found or is not in the database",
                    "Reason":"Product invalid"
                  }
          409:
            description: There is a problem with the request. There is a conflict
            body:
              application/json:
                example:  |
                  {
                    "DetailedInformation":"The inventory cannot be updated, there is a conflict with the Acomba X",
                    "Reason":"Acomba X was already updated before your changes could be commited"
                  }
/invoice:
  description: Invoices commands
  /order:
    post:
      description: Creates a new order for a customer
      securedBy: token
      body:
        application/json:
          properties:
            CustomerID: Id of the customer
            ProductID: Id of the product the customer wishes to buy
            Qty: Quantity the client wishes to purhcase
            Description: Description of the order
            ExpiresIn: Number of days before the order expires.
          example:  |
            {
              "CustomerID": "3dc02bfb7473420e9d3727e4579d00e9",
              "Description": "Ceci est une commande pour ti jo.",
              "ExpiresIn": "30",
              "Order": [
                {
                  "ProductID": "b40f3c222d584b5d81b95813deb564a3",
                  "Qty": "5.0"
                },
                {
                  "ProductID": "9e881f0c8874440784c12ecad82b3039",
                  "Qty": "3.0"
                }
              ]
            }
      responses:
        200:
          body:
            application/json:
              properties:
                OrderNumber: The unique number of the order.
              example:  |
                {
                  "status":true,
                  "OrderNumber": 2142
                }
        400:
          body:
            application/json:
              example:  |
                {
                  "DetailedInformation":"The product could not be found or is not in the database",
                  "Reason":"Product invalid"
                }


  
/server:
  /ping:
    get:
      description: "Returns true. This resource is mostly used to check if the connection to the server is still available."
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "status":true,
                  "text":"It seems like it's alive"
                }
  /config:
    /location:
      get:
        description: Returns the location saved in the server. To fill the comboboxes.
        securedBy: token
        responses:
          200:
            body:
              application/json:
                example:  |
                  {
                    "locations":["Étagère A","Étagère B","Étagère C"]
                  }
  /message:
    get:
      description: This url should be checked from time to time to do push notifications to the devices if there is a problem or something of that nature
      responses:
        200:
          description: The messages the device should show
          body:
            application/json:
              properties:
                type: "The following types are warning error and info"
                firstshow: "Timestamp of the first time the message was shown"
              example:  |
                {
                  "Messages":[
                    {
                      "Id":4,
                      "Title":"License comming to an end",
                      "Message":"Your service plan is comming to an end. Please consider renewing your license.",
                      "Type":"warning",
                      "FirstShow":"1498677971"
                    }
                  ]
                }
    /{id}:
      put:
        description: Do an action on a message such as close it, or mark it as seen
        body:
          application/json:
            properties:
              action: "The following actions are allowed: delete, snooze"
            example:  |
              {
                "Action":"delete"
              }